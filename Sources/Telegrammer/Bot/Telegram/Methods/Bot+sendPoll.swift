// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Parameters container struct for `sendPoll` method
    struct SendPollParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername). A native poll can't be sent to a private chat.
        var chatId: ChatId

        /// Poll question, 1-255 characters
        var question: String

        /// List of answer options, 2-10 strings 1-100 characters each
        var options: [String]

        /// Sends the message silently. Users will receive a notification with no sound.
        var disableNotification: Bool?

        /// If the message is a reply, ID of the original message
        var replyToMessageId: Int?

        /// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        var replyMarkup: ReplyMarkup?
        
        /// If the poll needs to be anonymous, defaults to true.
        var isAnonymous: Bool?
        
        /// If the poll allows multiple answers, ignored for polls in quiz mode, defaults to false.
        var allowsMultipleAnswers: Bool?
        
        /// Poll type, quiz or regular, defaults to “regular”
        var type: PollType?
        
        /// 0-based identifier of the correct answer option, required for polls in quiz mode
        var correctOptionID: Int?
        
        /// If the poll needs to be immediately closed. This can be useful for poll preview.
        var isClosed: Bool?
        
        /// Custom keys for coding/decoding `SendPollParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case question = "question"
            case options = "options"
            case disableNotification = "disable_notification"
            case replyToMessageId = "reply_to_message_id"
            case replyMarkup = "reply_markup"
            case isAnonymous = "is_anonymous"
            case allowsMultipleAnswers = "allows_multiple_answers"
            case type = "type"
            case correctOptionID = "correct_option_id"
            case isClosed = "is_closed"
        }

        public init(chatId: ChatId, question: String, options: [String], disableNotification: Bool? = nil, replyToMessageId: Int? = nil, replyMarkup: ReplyMarkup? = nil, isAnonymous: Bool? = nil, allowsMultipleAnswers: Bool? = nil, type: PollType? = nil, correctOptionID: Int? = nil, isClosed: Bool? = nil) {
            self.chatId = chatId
            self.question = question
            self.options = options
            self.disableNotification = disableNotification
            self.replyToMessageId = replyToMessageId
            self.replyMarkup = replyMarkup
            self.isAnonymous = isAnonymous
            self.allowsMultipleAnswers = allowsMultipleAnswers
            self.type = type
            self.correctOptionID = correctOptionID
            self.isClosed = isClosed
        }
    }

    /**
     Use this method to send a native poll. A native poll can't be sent to a private chat. On success, the sent Message is returned.

     SeeAlso Telegram Bot API Reference:
     [SendPollParams](https://core.telegram.org/bots/api#sendpoll)
     
     - Parameters:
         - params: Parameters container, see `SendPollParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Message` type
     */
    @discardableResult
    func sendPoll(params: SendPollParams) throws -> Future<Message> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Message>>
        response = try client.respond(endpoint: "sendPoll", body: body, headers: headers)
        return response.flatMap(to: Message.self) { try self.wrap($0) }
    }
}
